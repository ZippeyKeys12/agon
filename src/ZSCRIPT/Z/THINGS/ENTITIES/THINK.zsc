enum ZE_ThinkDelay{
    TICK_NEVER_THINK=-1,
    TICK_DEFAULT_THINK,
    TICK_ALWAYS_THINK=int.min,
}

extend
class ZEntity{
    private
    ZE_ThinkDelay LastThink,
                  NextThink;

    meta
    int ThinkDelay;

    Property ThinkDelay: ThinkDelay;

    [Property]{
        [ZEntity]
        ThinkDelay=-1;
    }

    override
    void Tick(){
        super.Tick();
        if(NextThink!=TICK_NEVER_THINK)
            return;
        if(NextThink==TICK_ALWAYS_THINK || Level.TotalTime==NextThink){
            Think();
        }
    }

    virtual
    void PreThink(){}

    virtual
    void Think()
    {SetNextThink(ThinkDelay);}

    virtual
    void PostThink()
    {LastThink=Level.TotalTime;}

    ZE_ThinkDelay GetLastThink()
    {return LastThink;}

    ZE_ThinkDelay GetNextThink()
    {return NextThink;}

    void SetNextThink(ZE_ThinkDelay Delay){
        if(Delay==TICK_NEVER_THINK)
            NextThink=TICK_NEVER_THINK;
        else if(Delay)
            NextThink=Level.TotalTime+Delay;
    }
}