class Parser_TSV{
    protected
    Array<TSVRow> Rows;
    
    static
    Parser_TSV Create(String LumpName)
    {return new('Parser_TSV').LoadLumps(LumpName);}
    
    Parser_TSV LoadLumps(String LumpName){
        static
        const String charsToDestroy[]={
            "\v",
            "\n",
            "\f",
            "\r"
        };
        int Lump=-1;
        until(-1==(Lump=Wads.FindLump(LumpName, Lump+1))){
            String InputFile=Wads.ReadLump(Lump);
            Array<String> Temp; Temp.Clear();
            InputFile.Split(Temp, "\n", TOK_SKIPEMPTY);
            for(int i=0; i<Temp.Size(); i++){
                for(int j=0; j<charsToDestroy.Size(); j++)
                    Temp[i].Replace(charsToDestroy[j], "");
                Rows.Push(TSVRow.Create(Temp[i]));
            }
        }
        return self;
    }
    
    Parser_TSV Clear(){
        Rows.Clear();
        return self;
    }
    
    bool GetBool(int Row, int Index) const
    {return GetInt(Row, Index);}
    
    int GetInt(int Row, int Index) const
    {return Get(Row, Index).ToInt();}
    
    double GetDouble(int Row, int Index) const
    {return Get(Row, Index).ToDouble();}
    
    String Get(int Row, int Index) const
    {return Rows[Row].Get(Index);}
    
    TSVRow GetRow(int Row) const
    {return (0<=Row && Row<Rows.Size())?Rows[Row]:null;}
    
    int Size() const
    {return Rows.Size();}
}

class TSVRow{
    Array<String> Values;
    
    static
    TSVRow Create(String Row)
    {return new('TSVRow').Init(Row);}
    
    TSVRow Init(String Row){
        Row.Split(Values, "\t", TOK_SKIPEMPTY);
        return self;
    }
    
    bool GetBool(int Index) const
    {return GetInt(Index);}
    
    int GetInt(int Index) const
    {return Get(Index).ToInt();}
    
    double GetDouble(int Index) const
    {return Get(Index).ToDouble();}
    
    String Get(int Index) const
    {return Values[Index];}
    
    int Size() const
    {return Values.Size();}
}